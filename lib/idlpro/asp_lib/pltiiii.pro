pro pltiiii, im1, im2, im3, im4, $
	image1, image2, image3, image4, $
	pix_degree, op, date, $
	second=second, noimage=noimage, portrait=portrait
;+
;
;	procedure:  pltiiii
;
;	purpose:  plot images obtained from getiiii.pro in PostScript
;
;
;		Continuum Intensity	Field Magnitude (Gauss)
;
;		Azimuth (degrees)	Inclination (degrees)
;
;
;	date:  1/93, rob@ncar
;
;	examples:
;
;  pltiiii,cct,fld,azm,incl,image1,image2,image3,image4,pix_degree,op,date
;  pltiiii,cct,fld,azm,incl,image1,image2,image3,image4,pix_degree,op,date,/sec
;
;		,/portrait
;
;	notes:  - some parameters are HARDWIRED and must be changed in the code
;	        - removed the !17 (specifying triplex roman vector font)
;		  from the strings to print, and using !p.font=0 for hardware
;		  fonts, and specifying the font type on the device line
;		  (/times, /bold)
;
;==============================================================================
;
;	Check number of parameters.
;
if n_params() ne 11 then begin
	print
	print, "usage:  pltiiii, im1, im2, im3, im4, $"
	print, "                 image1, image2, image3, image4, $"
	print, "                 pix_degree, op, date"
	print
	print, "	Plot images obtained from getiiii.pro in PostScript."
	print
	print, "	Arguments"
	print, "	    im1-im4	- input images generated by getiiii"
	print, "	    image*	- output scaled images for 2nd run"
	print, "	    pix_degree	- input pixels/degree"
	print, "	    op	        - operation number"
	print, "	    date        - date string for plot"
	print, "		          (e.g., '25 Mar 92')"
	print
	print, "	Keywords"
	print, "	    second	- set to indicate 2nd run, thus use"
	print, "		          image1-4 instead of im1-4"
	print, "	    noimage	- set to plot text only (for testing)"
	print, "	    portrait	- set to plot in portrait mode"
	print, "		          (def=landscape mode)"
	print
	return
endif
;-
;
;	Set general parameters.
;
true = 1
false = 0
do_landscape = true
if keyword_set(portrait) then do_landscape = false
;
;	Determine dimensions of input arrays.
;
xlen_data = sizeof(im1,1)
ylen_data = sizeof(im1,2)

;
;	Set plot ranges in Megameters.
;	-HARDWIRED-
;
mm_per_degree = 12.148			; Megameters/degree
x_deg = xlen_data / float(pix_degree)	; longitude degrees
y_deg = ylen_data / float(pix_degree)
range_p = [ [0., mm_per_degree*x_deg], [0., mm_per_degree*y_deg] ]
;
;	Set colorbar ranges.
;	-HARDWIRED-
;
range2 = intarr(2)		; field magnitude
range2(0) = 0
range2(1) = 3500

;------

;
;	Install special color table.
;
@wrap.com
set_plot, 'x'
newwct, 1
;;newwct, 5, carg=1.0
;
;	Convert the images to byte indices using special color table.
;
if not keyword_set(second) then begin
	print, 'Beginning to scale images ...'
;
;	-HARDWIRED-
	image1 = wrap_scalew(im1, 1, 0.0, max(im1))
	image2 = wrap_scalew(im2, 3, 0.0, 3500.0)
	image3 = wrap_scalew(im3, 4, 0.0, 360.0)
	image4 = wrap_scalew(im4, 3, 0.0, 180.0)
	print, '... Done scaling images.'
endif
;
;	Set up for PostScript device.
;
old_font = !p.font	; save old font info
!p.font = 0		; select hardware font
fileps = 'idl.ps'
set_plot, 'ps'
color = 0		; grayscale
color = 1		; color
if do_landscape then begin
	xlen_dev = 11.0
	ylen_dev = 8.5
	xoffset = (8.5 - ylen_dev)/2.0	; (note oddities for landscape mode)
	yoffset = 11.0 - (11.0 - xlen_dev)/2.0
	device, bits_per_pixel=8, file=fileps, /inches, $
		xoffset=xoffset, yoffset=yoffset, $
		xsize=xlen_dev, ysize=ylen_dev, $
		color=color, /times, /bold, /landscape
endif else begin
	xlen_dev = 8.5
	ylen_dev = 11.0
	xoffset = (8.5 - xlen_dev)/2.0
	yoffset = (11.0 - ylen_dev)/2.0
	device, bits_per_pixel=8, file=fileps, /inches, $
		xoffset=xoffset, yoffset=yoffset, $
		xsize=xlen_dev, ysize=ylen_dev, $
		color=color, /times, /bold, /portrait
endelse


;	Set width of image in units normalized to page width.
;
ratio1 = float(xlen_dev) / float(ylen_dev)		; ratio of PS output
ratio2 = float(xlen_data) / float(ylen_data)		; ratio of input data
;;ylen_norm = 0.40
ylen_norm = 0.36
xlen_norm = ylen_norm / ratio1 * ratio2

;	Offsets of first image in window, normalized units.
;
xx = 5.0
yy = 5.0
xborder = (1.0 - xlen_norm * 2) / xx
yborder = (1.0 - ylen_norm * 2) / yy
xoff = 2.2 * xborder
yoff = 1.95 * yborder

;	X, Y offsets of second spectral image from first.
;
x2 = xlen_norm + xborder
y2 = ylen_norm + yborder

;	Set coordinate positions for images.
;
x_im1_p1 = xoff
y_im1_p1 = yoff + y2

x_im2_p1 = x_im1_p1 + x2
y_im2_p1 = y_im1_p1

x_im3_p1 = xoff
y_im3_p1 = yoff

x_im4_p1 = x_im3_p1 + x2
y_im4_p1 = y_im3_p1

x_im1_p2 = x_im1_p1 + xlen_norm
x_im2_p2 = x_im2_p1 + xlen_norm
x_im3_p2 = x_im3_p1 + xlen_norm
x_im4_p2 = x_im4_p1 + xlen_norm

y_im1_p2 = y_im1_p1 + ylen_norm
y_im2_p2 = y_im2_p1 + ylen_norm
y_im3_p2 = y_im3_p1 + ylen_norm
y_im4_p2 = y_im4_p1 + ylen_norm

;	Set character, line thickness.
;
thick = 5.0
!x.thick=thick
!y.thick=thick
cth = 1.8	; charthick

rad2_x = 0.03
rad1_x = 0.5 * rad2_x
rad2_y = rad2_x * ratio1
coff = 0.09
;-----------------------------------------------
;
;	Plot and annotate the 1st image
;
if not keyword_set(noimage) then $
	tv, image1, x_im1_p1, y_im1_p1, xsize=xlen_norm, ysize=ylen_norm, $
		/normal

pos = [x_im1_p1, y_im1_p1, x_im1_p2, y_im1_p2]
plot, range_p(*, 0), range_p(*, 1), /nodata, /noerase, /ynozero, /normal, $
	xstyle=1, ystyle=1, charsize=1.5, xticklen=.04, yticklen=.04, $
	xcharsize=.0001, ycharsize=1.1, title=' ', $
	position=pos, xminor=1, yminor=1, charthick=cth
;;;	xcharsize=.0001, ycharsize=1.1, title='!17 ', $

if do_landscape then begin
	xtad = 0.03
	ytad = 0.03
endif else begin
	xtad = 0.06
	ytad = 0.022
endelse
x = x_im1_p1 - xtad
y = y_im1_p1
xyouts, x, y, 'S', charsize=2.0, charthick=cth, /normal, $
	align=0.0, orient=90.0

y = y_im1_p2
xyouts, x, y, 'N', charsize=2.0, charthick=cth, /normal, $
	align=1.0, orient=90.0

x = x_im1_p1
y = y_im1_p1 - ytad
xyouts, x, y, 'E', charsize=1.8, charthick=cth, /normal, align=0.0

x = x_im1_p2
xyouts, x, y, 'W', charsize=1.8, charthick=cth, /normal, align=1.0

;;x = x_im1_p1 - xtad - 0.01
;;y = y_im1_p1 + 0.5 * (y_im1_p2 - y_im1_p1)
;;xyouts, x, y, 'Megameters', charsize=1.5, charthick=cth, /normal, $
;;	align=0.5, orient=90.0

;-----------------------------------------------
;
;	Plot and annotate the 2nd image
;
if not keyword_set(noimage) then $
	tv, image2, x_im2_p1, y_im2_p1, xsize=xlen_norm, ysize=ylen_norm, $
		/normal

pos = [x_im2_p1, y_im2_p1, x_im2_p2, y_im2_p2]
plot, range_p(*, 0), range_p(*, 1), /nodata, /noerase, /ynozero, /normal, $
	xstyle=1, ystyle=1, charsize=1.5, xticklen=.04, yticklen=.04, $
	xcharsize=.0001, ycharsize=.00001, $
	position=pos, xminor=1, yminor=1, charthick=cth

v1 = range2(0)
v2 = range2(1)

xlen_cbar = xlen_norm
ylen_cbar = 0.02

ix1 = ix_color2
ix2 = ix_color2 + num_color2 - 1

x = x_im2_p1 + 0.02
y = y_im2_p1 - 1.1 * ylen_cbar
xc = xlen_cbar - 0.0575
yc = ylen_cbar
displayctn, ix1, ix2, x, y, xc, yc

plots, [x, x], [y, y + yc], /normal
x = x + xc/3.5
plots, [x, x], [y, y + yc], /normal
x = x + xc/3.5
plots, [x, x], [y, y + yc], /normal
x = x + xc/3.5
plots, [x, x], [y, y + yc], /normal

xyouts, x_im2_p1, y, stringit(v1), charsize=1.5, charthick=cth, $
	/normal

; v2/1000. for kGauss
xyouts, x_im2_p2, y, float_str(v2/1000., 1), charsize=1.5, charthick=cth, $
	/normal, align=1.0

;-----------------------------------------------
;
;	Plot and annotate the 3rd image
;
xnotch = 2.7 * rad2_x
ynotch = 2.7 * rad2_y
;
if not keyword_set(noimage) then begin
	im = notch_p(image3, xlen_norm, ylen_norm, 0, 0, xnotch, ynotch, $
		ix_nodat)
	tv, im, x_im3_p1, y_im3_p1, xsize=xlen_norm, ysize=ylen_norm, $
		/normal
endif

x = x_im3_p1 + xnotch		; draw a line around the key
y = y_im3_p1 + ynotch
plots, [x, x, x_im3_p1], [y_im3_p1, y, y], /normal

pos = [x_im3_p1, y_im3_p1, x_im3_p2, y_im3_p2]
plot, range_p(*, 0), range_p(*, 1), /nodata, /noerase, /ynozero, /normal, $
	xstyle=1, ystyle=1, charsize=1.5, xticklen=.04, yticklen=.04, $
	xcharsize=1.1, ycharsize=1.1, $
	position=pos, xminor=1, yminor=1, charthick=cth

if do_landscape then begin
	xtad = 0.03
endif else begin
	xtad = 0.06
endelse
x = x_im3_p1 - xtad
y = y_im3_p1
xyouts, x, y, 'S', charsize=2.0, charthick=cth, /normal, $
	align=0.0, orient=90.0

y = y_im3_p2
xyouts, x, y, 'N', charsize=2.0, charthick=cth, /normal, $
	align=1.0, orient=90.0

ix1 = ix_color
ix2 = ix_color + num_color - 1
tad = 0.003
xx = x_im3_p1 + tad
;;yy = y_im3_p1 + tad * ratio1
yy = y_im3_p1 + tad

print, '........start wrap im 3'
;;;if not keyword_set(noimage) then $
	wrap_key2, xx, yy, rad1_x, rad2_x, 2, 4, aratio=ratio1
print, '........end wrap im 3'

x = xx + 2.1 * rad2_x
y = yy + 0.8 * rad2_y
xyouts, x, y, '0', charsize=1.2, /normal, align=0.0

;;x = xx - 0.004
;;xyouts, x, y, '180', charsize=1.2, /normal, align=1.0

x = xx + rad2_x
y = yy + 2.1 * rad2_y
xyouts, x, y, '90', charsize=1.2, /normal, align=0.5

;;y = yy - 0.02
;;xyouts, x, y, '270', charsize=1.2, /normal, align=0.5

;-----------------------------------------------
;
;	Plot and annotate the 4th image
;
if not keyword_set(noimage) then begin
	im = notch_p(image4, xlen_norm, ylen_norm, 0, 0, xnotch, ynotch, $
		ix_nodat)
	tv, im, x_im4_p1, y_im4_p1, xsize=xlen_norm, ysize=ylen_norm, $
		/normal
endif

x = x_im4_p1 + xnotch		; draw a line around the key
y = y_im4_p1 + ynotch
plots, [x, x, x_im4_p1], [y_im4_p1, y, y], /normal

pos = [x_im4_p1, y_im4_p1, x_im4_p2, y_im4_p2]
plot, range_p(*, 0), range_p(*, 1), /nodata, /noerase, /ynozero, /normal, $
	xstyle=1, ystyle=1, charsize=1.5, xticklen=.04, yticklen=.04, $
	xcharsize=1.1, ycharsize=.0001, $
	position=pos, xminor=1, yminor=1, charthick=cth

ix1 = ix_color2
ix2 = ix_color2 + num_color2 - 1
xx = x_im4_p1 + 0.04
yy = y_im3_p1 + 0.03 * ylen_norm

print, '........start wrap im 4'
;;;if not keyword_set(noimage) then $
	wrap_key2, xx, yy, rad1_x, rad2_x, 1, 3, aratio=ratio1
print, '........end wrap im 4'

; put line at 90 degrees in key
x = xx + rad1_x
y = yy + rad2_y
plots, [x, xx + rad2_x], [y, y], /normal, thick=2.0

x = xx - 0.005
y = yy
xyouts, x, y, '180', charsize=1.2, /normal, align=1.0

y = yy + 1.6 * rad2_y
xyouts, x, y, '0', charsize=1.2, /normal, align=1.0

;
;-----------------------------------------------

;
;	Annotate the individual plots.
;
ytad = 0.005
xlen_normh = xlen_norm / 2.0
;
;;text = '!17Continuum Intensity, 25 Mar 92'
;;;text = '!17Continuum Intensity, Op. 5'
if do_landscape then begin
	text = 'Continuum Intensity, Op. ' + stringit(op)
endif else begin
	text = 'Continuum Intensity'
endelse
x = x_im1_p1 + xlen_normh
y = y_im1_p2 + ytad
xyouts, x, y, text, charsize=1.5, charthick=cth, /normal, align=0.5

;;;text = '!17Field Magnitude (Gauss)'
text = 'Field Magnitude (kGauss)'
x = x_im2_p1 + xlen_normh
y = y_im2_p2 + ytad
xyouts, x, y, text, charsize=1.5, charthick=cth, /normal, align=0.5

;;;text = '!17Field Azimuth (degrees)'
text = 'Field Azimuth (degrees)'
x = x_im3_p1 + xlen_normh
y = y_im3_p2 + ytad
xyouts, x, y, text, charsize=1.5, charthick=cth, /normal, align=0.5

;;;text = '!17Field Inclination (degrees)'
text = 'Field Inclination (degrees)'
x = x_im4_p1 + xlen_normh
y = y_im4_p2 + ytad
xyouts, x, y, text, charsize=1.5, charthick=cth, /normal, align=0.5

;
;	Annotate axes.
;
;;text = '!17IMAGE SCALE: ARCSECONDS'
;;;text = '!17IMAGE SCALE: MEGAMETERS'
text = 'IMAGE SCALE: MEGAMETERS'
x = 0.5
y = 0.35 * yoff
xyouts, x, y, text, charsize=1.4, charthick=cth, /normal, align=0.5

;
;	Annotate the slide.
;
;;;text = '!17HAO/NSO Advanced Stokes Polarimeter, 25 Mar 92'
text = 'HAO/NSO Advanced Stokes Polarimeter, ' + date
x = 0.5
;;y = 0.97
y = 0.94
xyouts, x, y, text, charsize=2.0, charthick=2.5, /normal, align=0.5

;;text = '!17 25 Mar 92: NOAA AR7117, N6.8 E42.4, 15:08-15:25UT (?????)'
;;text = '!17 25 Mar 92,  Operation 5'
;;x = 0.5
;;y = y - 0.03
;;xyouts, x, y, text, charsize=1.6, charthick=2.5, /normal, align=0.5

;
;	Close device and return to X windows.
;
device, /close_file
set_plot, 'x'
!p.font = old_font	; restore old font setting
;
;	Done.
;
end

